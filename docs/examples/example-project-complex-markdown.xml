<?xml version="1.0" encoding="UTF-8"?>
<proj:project xmlns:proj="http://ecoinformatics.org/datasetproject-beta1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://ecoinformatics.org/datasetproject-beta1">

    <name>MarkdownExample</name>
    <label>An XML project doc containing complex markdown</label>
    <description>A fake project to test the limits of showdown's markdown to HTML converter</description>

    <overview>
      <markdown>
        <![CDATA[
---
creator:Robyn
purpose:demonstration
---

# Features to test:
- Inline HTML & docbook tags
- Automatic Paragraphs
- Headers
- Blockquotes
- Lists
- Code Blocks
- Horizontal Rules
- Links
- Emphasis
- Inline Code
- Images
- Fenced Codeblocks
- Syntax Highlighting
- Tables
- Metadata
- URL Autolinking
- Custom IDs on Headlines
- Footnotes and Other Links
- Todos
- Strikethrough
- Definition Lists
- Math
- Citation-references
- Bibliography formatting
- XSS filter

# Inline HTML & docbook tags

<h3>This is surrounded by `h3` tags</h3>
<strong>This is surrounded by `strong` tags</strong>
<para>This line and the next one are surrounded by `para` tags</para>
<para>This should also be a paragraph</para>
<p>What other `docbook` tags need to be tested? Here is an example<subscript>subscript</subscript></p>

# Automatic Paragraphs

A paragraph is created by using

two

linebreaks

# Headers

If the above is large, then headers work.

# Blockquotes

> This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote. This is a block quote.

# Lists

The following list info comes from the showdown demo

Showdown supports ordered (numbered) and unordered (bulleted) lists.

### Unordered lists

You can make an unordered list by preceding list items with either a *, a - or a +. Markers are interchangeable too.

```md
* Item
+ Item
- Item
```

### Ordered lists

You can make an ordered list by preceding list items with a number.

```md
1. Item 1
2. Item 2
3. Item 3
```

It’s important to note that the actual numbers you use to mark the list have no effect on the HTML output Showdown produces. So you can use the same number in all items if you wish to.

### TaskLists (GFM Style)

Showdown also supports GFM styled takslists if the **`tasklists`** option is enabled.

```md
 - [x] checked list item
 - [ ] unchecked list item
```

 - [x] checked list item
 - [ ] unchecked list item

### List syntax

List markers typically start at the left margin, but may be indented by up to three spaces.

```md
   * this is valid
   * this is too
```

List markers must be followed by one or more spaces or a tab.

To make lists look nice, you can wrap items with hanging indents:

```md
*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
```

But if you want to be lazy, you don’t have to

If one list item is separated by a blank line, Showdown will wrap all the list items in `<p>` tags in the HTML output.
So this input:

```md
* Bird

* Magic
* Johnson
```

Results in:

```html
<ul>
<li><p>Bird</p></li>
<li><p>Magic</p></li>
<li><p>Johnson</p></li>
</ul>
```

This differs from other markdown implementations such as GFM (github) or commonmark.

### Nested blocks

List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:

```md
1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
```

This is valid for other block elements such as blockquotes:

```md
*   A list item with a blockquote:

    > This is a blockquote
    > inside a list item.
```

or event other lists.

### Nested lists

You can create nested lists by indenting list items by **four** spaces.

```md
1.  Item 1
    1. A corollary to the above item.
    2. Yet another point to consider.
2.  Item 2
    * A corollary that does not need to be ordered.
    * This is indented four spaces
    * You might want to consider making a new list.
3.  Item 3
```

This behavior is consistent with the original spec but differs from other implementations suck as GFM or commonmark. Prior to version 1.5, you just needed to indent two spaces for it to be considered a sublist.
You can disable the **four spaces requirement** with option **`disableForced4SpacesIndentedSublists`**

To nest a third (or more) sublist level, you need to indent 4 extra spaces (or 1 extra tab) for each level.

```md
1.  level 1
    1.  Level 2
        *   Level 3
    2.  level 2
        1.  Level 3
1.  Level 1
```

### Nested code blocks

You can nest fenced codeblocks the same way you nest other block elements, by indenting by fours spaces or a tab:

```md
1.  Some code:

    ```js
    var foo = 'bar';
    console.log(foo);
    ```
```

To put a *indented style* code block within a list item, the code block needs to be indented twice — 8 spaces or two tabs:

```md
1.  Some code:

    var foo = 'bar';
    console.log(foo);
```

# Code Blocks

```
This is a block of code
```

# Horizontal Rules

---
===

# Links

Info from showdown demo:

### Simple

If you wrap a valid URL or email in `<>` it will be turned into a link whose text is the link itself.

```md
link to <http://www.google.com/>

this is my email <somedude@mail.com>
```

In the case of email addreses, Showdown will also perform a bit of randomized decimal and hex entity-encoding to help obscure your address from address-harvesting spambots.
You can disable this obfuscation setting **`encodeEmails`** option to `false`.

With the option **`simplifiedAutoLink`** enabled, Showdown will automagically turn every valid URL it finds in the text body to links for you, without the need to wrap them in `<>`.

```md
link to http://www.google.com/

this is my email somedude@mail.com
```

### Inline

You can create an inline link by wrapping link text in brackets ( `[ ]` ), and then wrapping the link in parentheses ( `( )` ).

For example, to create a hyperlink to github.com/showdownjs/showdown, with a link text that says, Get Showdown!, you'd write this in Markdown: `[Get Showdown!](https://github.com/showdownjs/showdown)`.

### Reference Style

You can also use the reference style, like this:

```md
this is a [link to google][1]

[1]: www.google.com
```

Showdown also supports implicit link references:

```md
this is a link to [google][]

[google]: www.google.com
```

# Emphasis

**yep.**

# Inline Code

Use single backticks (`) to format text in a special monospace format like `this`. Everything within the backticks appear as-is, with no other special formatting.

# Images

Inline image syntax looks like this: ```![Alt text](url/to/image)```. For example:
![Dataone logo](https://www.dataone.org/sites/default/files/d1-logo-v8_aligned_left.png)

# Fenced Codeblocks

```
# This has already been demonstrated, but here is another example.

library(libraRy)

this %>%
    is() %>%
    fenced() %>%
    code()

```

# Syntax Highlighting

```javascript

var x = 5;
var str = 'str';

/* need to figure out how to use syntax highlighting */

```

# Tables

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| **col 3 is**  | right-aligned | $1600 |
| col 2 is      | *centered*    |   $12 |
| zebra stripes | ~~are neat~~  |    $1 |

# Metadata

metadata: Metadata support is enabled when creating a new converter (`new showdown.Converter()`), by adding the argument `metadata: true`. Then information between `---` and `---` at the top of this document can be accessed using `converter.getMetadata()`. If successful, the information extracted will be displayed at the very bottom of this jsfiddle document.

# URL Autolinking

with the argument `simplifiedAutoLink` set to `true` in the `new showdown.Converter()`, text like `www.google.com` will be converted to `<a href="www.google.com">www.google.com</a>`. Like so:

You can search for things on www.google.com

# Custom IDs on Headlines {this-is-my-custom-id}

Check the console. This header should have the id `this-is-my-custom-id`. For this to work, the option `customizedHeaderId` must be set to `true` in `new showdown.Converter()`

# Footnotes and Other Links

# Todos

# Strikethrough

# Definition Lists

# Math

# Citation-references

# Bibliography formatting

# XSS filter

]]>
      </markdown>
    </overview>

</proj:project>
